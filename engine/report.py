import os
from os import PathLike
from typing import Optional, cast

import fileutils
from fs import FS, File, Directory, convert_file_to_title, convert_file_to_context, convert_directory_to_title, \
    convert_directory_to_context
from logs import Logger
from server import Template
from typings import LoggerLike


class Reporter:

    def __init__(self,
                 fs: FS,
                 templates_dir: PathLike,
                 *,
                 logger: Optional['LoggerLike'] = None):
        self.fs = fs
        self.templates_dir = os.fspath(templates_dir)
        if logger is None:
            logger = Logger.get_logger('engine')
        self.logger = logger

        # The home directory for storing HTML files.
        self.root_dir = fileutils.mkdir(fileutils.get_home_dir(), '.hot-diagnose')

        # The dict of templates infomation whose key is the templates' name and the value is the templates' text.
        self.template_dict = dict()

        # The dict of file context whose key is the HTML files' name and the value is its context dict. The HTML files
        # are generated according to tamplates above while the context is generated by executed files.
        self.file_context = dict()

    def prepare(self):
        fs = FS(self.templates_dir, logger=self.logger)
        fs.build()

        def _append_dict(target):
            if isinstance(target, File) and target.extension == '.html':
                target = cast(File, target)
                self.template_dict[target.basename] = str(target)

        for _ in fs.walk(hook=_append_dict):
            pass

    def _walk_hook(self, target: File | Directory) -> None:
        if isinstance(target, File):
            target = cast(File, target)
            html_name = convert_file_to_title(target)
            html_context = convert_file_to_context(target)
            self.file_context[html_name] = html_context
        elif isinstance(target, Directory):
            target = cast(Directory, target)
            html_name = convert_directory_to_title(target)
            html_context = convert_directory_to_context(target)
            self.file_context[html_name] = html_context
        else:
            self.logger.warning(f"Unexpected file {target}")


    def build_htmls(self):
        self.fs.ensure_built()
        for _ in self.fs.walk(hook=self._walk_hook):
            pass

        assert len(self.template_dict) == 3 and len(self.file_context.items()) > 0

        # The dict of html rendering result whose key is the HTML files' name and the value is rendering result. The
        # result is in the form of Template object.
        file_dict = dict()

        for filename, file_context in self.file_context.items():
            if filename.startswith('f'):
                file_dict[filename] = Template(self.template_dict['file.html'], file_context)
            elif filename.startswith('d'):
                file_dict[filename] = Template(self.template_dict['directory.html'], file_context)
            else:
                self.logger.warning('Unexpected filename')

        for filename, template in file_dict.items():
            fileutils.write_file(os.path.join(self.root_dir, filename), template.render())

    def report(self):
        pass

